#![cfg_attr(feature = "cargo-clippy", allow(clippy))]
use std::iter::once;
use gc::Gc;

use heap::Heap;

use syntax::*;
use syntax::Term::*;
use syntax::ToplevelCmd::*;

use token::*;

grammar<'input>(heap: &mut Heap, text: &'input str);

// This defines the interface with the lexer
extern {
  type Location = usize;
  type Error    = Error;
  enum Token<'input> {
    "VAR"        => Token::VAR(<&'input str>),
    "NUMBER"     => Token::NUMBER(<&'input str>),
    "CONST"      => Token::CONST(<&'input str>),
    "FROM"       => Token::FROM{..},
    "COMMA"      => Token::COMMA{..},
    "TRUE"       => Token::TRUE{..},
    "PERIOD"     => Token::PERIOD{..},
    "PIPE"       => Token::PIPE{..},
    "LPAREN"     => Token::LPAREN{..},
    "RPAREN"     => Token::RPAREN{..},
    "LBRACKET"   => Token::LBRACKET{..},
    "RBRACKET"   => Token::RBRACKET{..},
    "GOAL"       => Token::GOAL{..},
    "QUIT"       => Token::QUIT{..},
    "USE"        => Token::USE{..},
    "STRING"     => Token::STRING(<&'input str>),
  }
}
// Productions

// toplevel:
//   | EOF                      { [] }
//   | exprtop                  { $1 }
//   | cmdtop                   { $1 }
pub Toplevel: Vec<ToplevelCmd> = {
  Exprtop,
  Cmdtop
};

// exprtop:
//   | expr EOF                 { [$1] }
//   | expr toplevel            { $1 :: $2 }
Exprtop: Vec<ToplevelCmd> = {
  <Expr>                => vec![<>],
  <e:Expr> <t:Toplevel> => { once(e).chain(t.into_iter()).collect() }
};

// cmdtop:
//   | cmd EOF                  { [$1] }
//   | cmd toplevel             { $1 :: $2 }
Cmdtop: Vec<ToplevelCmd> = {
  <Cmd>                => vec![<>],
  <c:Cmd> <t:Toplevel> => { once(c).chain(t.into_iter()).collect() }
};

// cmd:
//   | USE STRING { Use $2 }
//   | QUIT       { Quit }
Cmd: ToplevelCmd = {
  "USE" <"STRING"> => Use(<>.to_string()),
  "QUIT"           => Quit
};

// expr:
//   | goal      { $1 }
//   | assertion { $1 }
Expr = {
  Goal,
  Assertion
};


// goal:
//   | GOAL clause PERIOD        { Goal $2 }
Goal: ToplevelCmd = {
  "GOAL" <Clause> "PERIOD" => Goal(<>)
};


// assertion:
//   | atom PERIOD               { Assert ($1, []) }
//   | atom FROM clause PERIOD   { Assert ($1, $3) }
Assertion: ToplevelCmd = {
  <Atom> "PERIOD"                     => Assert((<>, vec![])),
  <a:Atom> "FROM" <c:Clause> "PERIOD" => Assert((a,c))
};

// atom:
//   | CONST                     { ($1, []) }
//   | CONST LPAREN args RPAREN  { ($1, $3) }
Atom: (Constant, Vec<Gc<Term>>) = {
  <"CONST">                              => (heap.insert_string(<>.to_string()), vec![]),
  <c:"CONST"> "LPAREN" <a:Args> "RPAREN" => (heap.insert_string(c.to_string()), a)
};


// clause:
//   | TRUE                      { [] }
//   | atom                      { [$1] }
//   | atom COMMA clause         { $1 :: $3 }
Clause: Vec<Atom> = {
  "TRUE"                      => vec![],
  <Atom>                      => vec![<>],
  <a:Atom> "COMMA" <c:Clause> => { once(a).chain(c.into_iter()).collect() }
};


// args:
//   | literal            { [$1] }
//   | literal COMMA args { $1 :: $3 }
Args: Vec<Gc<Term>> = {
  <Literal>                    => vec![<>],
  <l:Literal> "COMMA" <a:Args> => { once(l).chain(a.into_iter()).collect() }
};


// literal:
//   | CONST                    { Const $1 }
//   | VAR                      { Var ($1, 0) }
//   | NUMBER                   { convert to calls to succ }
//   | CONST LPAREN args RPAREN { App ($1, $3) }
Literal: Gc<Term> = {
  <"CONST">                              => {
    let c = heap.insert_string(<>.to_string());
    heap.insert_term( Const(c) )
  },
  <"VAR">                                => {
    let v = heap.insert_string(<>.to_string());
    heap.insert_term( Var((v, 0)) )
  },
  <"NUMBER">                             => {
    str_to_nat(heap, <>)
  },
  <c:"CONST"> "LPAREN" <a:Args> "RPAREN" => {
    let app = heap.insert_string(c.to_string());
    heap.insert_term( App(app, a) )
  },
  ListLiteral =>  <>
};

ListLiteral: Gc<Term> = {
  "LBRACKET" "RBRACKET"                  => vec_to_list(heap, vec![]),
  "LBRACKET" <a:Args> "RBRACKET"         => {
    vec_to_list(heap, a)
  },
  "LBRACKET" <head:Literal> "PIPE" <tail:Literal> "RBRACKET" => {
    let cons = heap.insert_string("cons".to_string());
    heap.insert_term(Term::App(cons, vec![head, tail]))
  }
};

